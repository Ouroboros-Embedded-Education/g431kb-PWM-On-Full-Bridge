
Full-Mosfet-Bridge-F431KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004740  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004918  08004918  00005918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004928  08004928  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004928  08004928  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800492c  0800492c  0000592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004930  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000010  08004940  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004940  00006138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc9e  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210c  00000000  00000000  00015cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00017df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  00018ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eabe  00000000  00000000  00019bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105ed  00000000  00000000  000386ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1574  00000000  00000000  00048c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  0011a250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0011eb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004900 	.word	0x08004900

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004900 	.word	0x08004900

08000218 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	invert = 1;
 8000222:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	20000130 	.word	0x20000130

08000238 <_read_pot>:

uint8_t _read_pot(){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	uint8_t perc;
	uint16_t AdcVal, AdcRef = 4095;
 800023e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000242:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 8000244:	480c      	ldr	r0, [pc, #48]	@ (8000278 <_read_pot+0x40>)
 8000246:	f001 f8c9 	bl	80013dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800024a:	2164      	movs	r1, #100	@ 0x64
 800024c:	480a      	ldr	r0, [pc, #40]	@ (8000278 <_read_pot+0x40>)
 800024e:	f001 f981 	bl	8001554 <HAL_ADC_PollForConversion>
	AdcVal = HAL_ADC_GetValue(&hadc1);
 8000252:	4809      	ldr	r0, [pc, #36]	@ (8000278 <_read_pot+0x40>)
 8000254:	f001 fa56 	bl	8001704 <HAL_ADC_GetValue>
 8000258:	4603      	mov	r3, r0
 800025a:	80bb      	strh	r3, [r7, #4]

	perc = AdcVal*100/AdcRef;
 800025c:	88bb      	ldrh	r3, [r7, #4]
 800025e:	2264      	movs	r2, #100	@ 0x64
 8000260:	fb03 f202 	mul.w	r2, r3, r2
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	fb92 f3f3 	sdiv	r3, r2, r3
 800026a:	70fb      	strb	r3, [r7, #3]

	return perc;
 800026c:	78fb      	ldrb	r3, [r7, #3]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	2000002c 	.word	0x2000002c

0800027c <_setup_motor>:

void _setup_motor(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P1_CTRL_GPIO_Port, P1_CTRL_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000288:	f002 fa1c 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_CTRL_GPIO_Port, P2_CTRL_Pin, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2110      	movs	r1, #16
 8000290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000294:	f002 fa16 	bl	80026c4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000298:	2104      	movs	r1, #4
 800029a:	4808      	ldr	r0, [pc, #32]	@ (80002bc <_setup_motor+0x40>)
 800029c:	f003 fa94 	bl	80037c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002a0:	2100      	movs	r1, #0
 80002a2:	4807      	ldr	r0, [pc, #28]	@ (80002c0 <_setup_motor+0x44>)
 80002a4:	f003 fa90 	bl	80037c8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <_setup_motor+0x44>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2200      	movs	r2, #0
 80002ae:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80002b0:	4b02      	ldr	r3, [pc, #8]	@ (80002bc <_setup_motor+0x40>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2200      	movs	r2, #0
 80002b6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000098 	.word	0x20000098
 80002c0:	200000e4 	.word	0x200000e4

080002c4 <_disable_motor>:

void _disable_motor(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80002c8:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <_disable_motor+0x30>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2200      	movs	r2, #0
 80002ce:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <_disable_motor+0x34>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2200      	movs	r2, #0
 80002d6:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(P1_CTRL_GPIO_Port, P1_CTRL_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2102      	movs	r1, #2
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e0:	f002 f9f0 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_CTRL_GPIO_Port, P2_CTRL_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ec:	f002 f9ea 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000e4 	.word	0x200000e4
 80002f8:	20000098 	.word	0x20000098

080002fc <_set_clockwise>:

void _set_clockwise(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	/* Sentido Horario: Habilita Mosfet-P1, PWM no Canal N2 */
	/* Canal Mosfet-N2 esta no Timer3-CH2 */
	HAL_GPIO_WritePin(P1_CTRL_GPIO_Port, P1_CTRL_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2102      	movs	r1, #2
 8000304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000308:	f002 f9dc 	bl	80026c4 <HAL_GPIO_WritePin>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}

08000310 <_set_anticlockwise>:

void _set_anticlockwise(){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	/* Sentido Anti-Horario: Habilita Mosfet-P2, PWM no Canal N1 */
	/* Canal Mosfet-N1 esta no Timer8-CH1 */
	HAL_GPIO_WritePin(P2_CTRL_GPIO_Port, P2_CTRL_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2110      	movs	r1, #16
 8000318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031c:	f002 f9d2 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <_set_power>:

void _set_power(uint8_t power){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	if (isClockWise){
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <_set_power+0x30>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d004      	beq.n	8000340 <_set_power+0x1c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, power);
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <_set_power+0x34>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, power);
	}
}
 800033e:	e003      	b.n	8000348 <_set_power+0x24>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, power);
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <_set_power+0x38>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	79fa      	ldrb	r2, [r7, #7]
 8000346:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	20000000 	.word	0x20000000
 8000358:	20000098 	.word	0x20000098
 800035c:	200000e4 	.word	0x200000e4

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 fbf7 	bl	8000b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f83e 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 fa1e 	bl	80007ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000370:	f000 f87a 	bl	8000468 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000374:	f000 f8f0 	bl	8000558 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000378:	f000 f966 	bl	8000648 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  _setup_motor();
 800037c:	f7ff ff7e 	bl	800027c <_setup_motor>
  _set_clockwise(PwmValue);
 8000380:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <main+0x7c>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ffb9 	bl	80002fc <_set_clockwise>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PwmValue = _read_pot();
 800038a:	f7ff ff55 	bl	8000238 <_read_pot>
 800038e:	4603      	mov	r3, r0
 8000390:	461a      	mov	r2, r3
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <main+0x7c>)
 8000394:	701a      	strb	r2, [r3, #0]
	  _set_power(PwmValue);
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <main+0x7c>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ffc2 	bl	8000324 <_set_power>

	  if (invert == 1){
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <main+0x80>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d115      	bne.n	80003d4 <main+0x74>
		  invert = 0;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <main+0x80>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
		  if (isClockWise == 1){
 80003ae:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <main+0x84>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d107      	bne.n	80003c6 <main+0x66>
			  _disable_motor();
 80003b6:	f7ff ff85 	bl	80002c4 <_disable_motor>
			  _set_anticlockwise();
 80003ba:	f7ff ffa9 	bl	8000310 <_set_anticlockwise>
			  isClockWise = 0;
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <main+0x84>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
 80003c4:	e006      	b.n	80003d4 <main+0x74>
		  }
		  else{
			  _disable_motor();
 80003c6:	f7ff ff7d 	bl	80002c4 <_disable_motor>
			  _set_clockwise();
 80003ca:	f7ff ff97 	bl	80002fc <_set_clockwise>
			  isClockWise = 1;
 80003ce:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <main+0x84>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  HAL_Delay(100);
 80003d4:	2064      	movs	r0, #100	@ 0x64
 80003d6:	f000 fc2f 	bl	8000c38 <HAL_Delay>
	  PwmValue = _read_pot();
 80003da:	e7d6      	b.n	800038a <main+0x2a>
 80003dc:	20000131 	.word	0x20000131
 80003e0:	20000130 	.word	0x20000130
 80003e4:	20000000 	.word	0x20000000

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b094      	sub	sp, #80	@ 0x50
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	2238      	movs	r2, #56	@ 0x38
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f004 fa56 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800040a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800040e:	f002 f989 	bl	8002724 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000412:	2302      	movs	r3, #2
 8000414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800041a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041c:	2340      	movs	r3, #64	@ 0x40
 800041e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000420:	2300      	movs	r3, #0
 8000422:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4618      	mov	r0, r3
 800042a:	f002 fa2f 	bl	800288c <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000434:	f000 fa10 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800043c:	2301      	movs	r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f002 fd2d 	bl	8002eb0 <HAL_RCC_ClockConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800045c:	f000 f9fc 	bl	8000858 <Error_Handler>
  }
}
 8000460:	bf00      	nop
 8000462:	3750      	adds	r7, #80	@ 0x50
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08c      	sub	sp, #48	@ 0x30
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800046e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2220      	movs	r2, #32
 800047e:	2100      	movs	r1, #0
 8000480:	4618      	mov	r0, r3
 8000482:	f004 fa11 	bl	80048a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000486:	4b32      	ldr	r3, [pc, #200]	@ (8000550 <MX_ADC1_Init+0xe8>)
 8000488:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800048c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800048e:	4b30      	ldr	r3, [pc, #192]	@ (8000550 <MX_ADC1_Init+0xe8>)
 8000490:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000494:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000496:	4b2e      	ldr	r3, [pc, #184]	@ (8000550 <MX_ADC1_Init+0xe8>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049c:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <MX_ADC1_Init+0xe8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80004a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a8:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004b4:	4b26      	ldr	r3, [pc, #152]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80004c0:	4b23      	ldr	r3, [pc, #140]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ce:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004da:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80004e8:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f0:	4817      	ldr	r0, [pc, #92]	@ (8000550 <MX_ADC1_Init+0xe8>)
 80004f2:	f000 fdef 	bl	80010d4 <HAL_ADC_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80004fc:	f000 f9ac 	bl	8000858 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000500:	2300      	movs	r3, #0
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000508:	4619      	mov	r1, r3
 800050a:	4811      	ldr	r0, [pc, #68]	@ (8000550 <MX_ADC1_Init+0xe8>)
 800050c:	f001 fda4 	bl	8002058 <HAL_ADCEx_MultiModeConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000516:	f000 f99f 	bl	8000858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_ADC1_Init+0xec>)
 800051c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800051e:	2306      	movs	r3, #6
 8000520:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000526:	237f      	movs	r3, #127	@ 0x7f
 8000528:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800052a:	2304      	movs	r3, #4
 800052c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4619      	mov	r1, r3
 8000536:	4806      	ldr	r0, [pc, #24]	@ (8000550 <MX_ADC1_Init+0xe8>)
 8000538:	f001 f8f2 	bl	8001720 <HAL_ADC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000542:	f000 f989 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	3730      	adds	r7, #48	@ 0x30
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000002c 	.word	0x2000002c
 8000554:	04300002 	.word	0x04300002

08000558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08e      	sub	sp, #56	@ 0x38
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800055e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800058a:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_TIM3_Init+0xe8>)
 800058c:	4a2d      	ldr	r2, [pc, #180]	@ (8000644 <MX_TIM3_Init+0xec>)
 800058e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 8000590:	4b2b      	ldr	r3, [pc, #172]	@ (8000640 <MX_TIM3_Init+0xe8>)
 8000592:	f240 1267 	movw	r2, #359	@ 0x167
 8000596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <MX_TIM3_Init+0xe8>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_TIM3_Init+0xe8>)
 80005a0:	2264      	movs	r2, #100	@ 0x64
 80005a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_TIM3_Init+0xe8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_TIM3_Init+0xe8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005b0:	4823      	ldr	r0, [pc, #140]	@ (8000640 <MX_TIM3_Init+0xe8>)
 80005b2:	f003 f851 	bl	8003658 <HAL_TIM_Base_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005bc:	f000 f94c 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ca:	4619      	mov	r1, r3
 80005cc:	481c      	ldr	r0, [pc, #112]	@ (8000640 <MX_TIM3_Init+0xe8>)
 80005ce:	f003 fb0f 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80005d8:	f000 f93e 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005dc:	4818      	ldr	r0, [pc, #96]	@ (8000640 <MX_TIM3_Init+0xe8>)
 80005de:	f003 f892 	bl	8003706 <HAL_TIM_PWM_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80005e8:	f000 f936 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	4811      	ldr	r0, [pc, #68]	@ (8000640 <MX_TIM3_Init+0xe8>)
 80005fc:	f004 f846 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000606:	f000 f927 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060a:	2360      	movs	r3, #96	@ 0x60
 800060c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000612:	2302      	movs	r3, #2
 8000614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	2204      	movs	r2, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4807      	ldr	r0, [pc, #28]	@ (8000640 <MX_TIM3_Init+0xe8>)
 8000622:	f003 f9d1 	bl	80039c8 <HAL_TIM_PWM_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800062c:	f000 f914 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <MX_TIM3_Init+0xe8>)
 8000632:	f000 f9c3 	bl	80009bc <HAL_TIM_MspPostInit>

}
 8000636:	bf00      	nop
 8000638:	3738      	adds	r7, #56	@ 0x38
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000098 	.word	0x20000098
 8000644:	40000400 	.word	0x40000400

08000648 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	@ 0x70
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000668:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2234      	movs	r2, #52	@ 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 f910 	bl	80048a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000688:	4b46      	ldr	r3, [pc, #280]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 800068a:	4a47      	ldr	r2, [pc, #284]	@ (80007a8 <MX_TIM8_Init+0x160>)
 800068c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 359;
 800068e:	4b45      	ldr	r3, [pc, #276]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 8000690:	f240 1267 	movw	r2, #359	@ 0x167
 8000694:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b43      	ldr	r3, [pc, #268]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 800069c:	4b41      	ldr	r3, [pc, #260]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 800069e:	2264      	movs	r2, #100	@ 0x64
 80006a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b40      	ldr	r3, [pc, #256]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006a8:	4b3e      	ldr	r3, [pc, #248]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80006b4:	483b      	ldr	r0, [pc, #236]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 80006b6:	f002 ffcf 	bl	8003658 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80006c0:	f000 f8ca 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006ce:	4619      	mov	r1, r3
 80006d0:	4834      	ldr	r0, [pc, #208]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 80006d2:	f003 fa8d 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80006dc:	f000 f8bc 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80006e0:	4830      	ldr	r0, [pc, #192]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 80006e2:	f003 f810 	bl	8003706 <HAL_TIM_PWM_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80006ec:	f000 f8b4 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000700:	4619      	mov	r1, r3
 8000702:	4828      	ldr	r0, [pc, #160]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 8000704:	f003 ffc2 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800070e:	f000 f8a3 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000712:	2360      	movs	r3, #96	@ 0x60
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800071a:	2302      	movs	r3, #2
 800071c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800071e:	2300      	movs	r3, #0
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000730:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 800073a:	f003 f945 	bl	80039c8 <HAL_TIM_PWM_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000744:	f000 f888 	bl	8000858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000760:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800076e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 8000786:	f004 f803 	bl	8004790 <HAL_TIMEx_ConfigBreakDeadTime>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8000790:	f000 f862 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <MX_TIM8_Init+0x15c>)
 8000796:	f000 f911 	bl	80009bc <HAL_TIM_MspPostInit>

}
 800079a:	bf00      	nop
 800079c:	3770      	adds	r7, #112	@ 0x70
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4
 80007a8:	40013400 	.word	0x40013400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <MX_GPIO_Init+0xa4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <MX_GPIO_Init+0xa4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_GPIO_Init+0xa4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_GPIO_Init+0xa4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <MX_GPIO_Init+0xa4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_GPIO_Init+0xa4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P1_CTRL_Pin|P2_CTRL_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2112      	movs	r1, #18
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fa:	f001 ff63 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_CTRL_Pin P2_CTRL_Pin */
  GPIO_InitStruct.Pin = P1_CTRL_Pin|P2_CTRL_Pin;
 80007fe:	2312      	movs	r3, #18
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000818:	f001 fdd2 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INVERT_Pin */
  GPIO_InitStruct.Pin = INVERT_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INVERT_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	4808      	ldr	r0, [pc, #32]	@ (8000854 <MX_GPIO_Init+0xa8>)
 8000832:	f001 fdc5 	bl	80023c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2006      	movs	r0, #6
 800083c:	f001 fd8b 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000840:	2006      	movs	r0, #6
 8000842:	f001 fda2 	bl	800238a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <HAL_MspInit+0x44>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	@ 0x60
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	@ 0x58
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800089a:	f001 ffe7 	bl	800286c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09a      	sub	sp, #104	@ 0x68
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	2244      	movs	r2, #68	@ 0x44
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 ffeb 	bl	80048a8 <memset>
  if(hadc->Instance==ADC1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008da:	d134      	bne.n	8000946 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fcc3 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008f8:	f7ff ffae 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <HAL_ADC_MspInit+0xa4>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <HAL_ADC_MspInit+0xa4>)
 8000902:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <HAL_ADC_MspInit+0xa4>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <HAL_ADC_MspInit+0xa4>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <HAL_ADC_MspInit+0xa4>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HAL_ADC_MspInit+0xa4>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = POT_Pin;
 800092c:	2301      	movs	r3, #1
 800092e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	2303      	movs	r3, #3
 8000932:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800093c:	4619      	mov	r1, r3
 800093e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000942:	f001 fd3d 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3768      	adds	r7, #104	@ 0x68
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <HAL_TIM_Base_MspInit+0x5c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d10c      	bne.n	8000980 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <HAL_TIM_Base_MspInit+0x60>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <HAL_TIM_Base_MspInit+0x60>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6593      	str	r3, [r2, #88]	@ 0x58
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_TIM_Base_MspInit+0x60>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800097e:	e010      	b.n	80009a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <HAL_TIM_Base_MspInit+0x64>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d10b      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <HAL_TIM_Base_MspInit+0x60>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098e:	4a09      	ldr	r2, [pc, #36]	@ (80009b4 <HAL_TIM_Base_MspInit+0x60>)
 8000990:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000994:	6613      	str	r3, [r2, #96]	@ 0x60
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <HAL_TIM_Base_MspInit+0x60>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40000400 	.word	0x40000400
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40013400 	.word	0x40013400

080009bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a23      	ldr	r2, [pc, #140]	@ (8000a68 <HAL_TIM_MspPostInit+0xac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d11d      	bne.n	8000a1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <HAL_TIM_MspPostInit+0xb0>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <HAL_TIM_MspPostInit+0xb0>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <HAL_TIM_MspPostInit+0xb0>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = N2_CTRL_Pin;
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a06:	2302      	movs	r3, #2
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(N2_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f001 fcd4 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000a18:	e022      	b.n	8000a60 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <HAL_TIM_MspPostInit+0xb4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d11d      	bne.n	8000a60 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_TIM_MspPostInit+0xb0>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_TIM_MspPostInit+0xb0>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_TIM_MspPostInit+0xb0>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = N1_CTRL_Pin;
 8000a3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(N1_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5c:	f001 fcb0 	bl	80023c0 <HAL_GPIO_Init>
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40013400 	.word	0x40013400

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f897 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INVERT_Pin);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f001 fe0c 	bl	80026f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fec1 	bl	80048b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fc13 	bl	8000360 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b48:	08004930 	.word	0x08004930
  ldr r2, =_sbss
 8000b4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b50:	20000138 	.word	0x20000138

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>

08000b56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f001 fbed 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f80e 	bl	8000b88 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e001      	b.n	8000b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b78:	f7ff fe74 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d022      	beq.n	8000be2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_InitTick+0x6c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 fbf8 	bl	80023a6 <HAL_SYSTICK_Config>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d809      	bhi.n	8000bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bca:	f001 fbc4 	bl	8002356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_InitTick+0x70>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e007      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e004      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e001      	b.n	8000be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	20000004 	.word	0x20000004
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <HAL_IncTick+0x1c>)
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	20000134 	.word	0x20000134
 8000c1c:	2000000c 	.word	0x2000000c

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000134 	.word	0x20000134

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c50:	d004      	beq.n	8000c5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_Delay+0x40>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4413      	add	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5c:	bf00      	nop
 8000c5e:	f7ff ffdf 	bl	8000c20 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d8f7      	bhi.n	8000c5e <HAL_Delay+0x26>
  {
  }
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000000c 	.word	0x2000000c

08000c7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	431a      	orrs	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	609a      	str	r2, [r3, #8]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3360      	adds	r3, #96	@ 0x60
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <LL_ADC_SetOffset+0x44>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	4313      	orrs	r3, r2
 8000d14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d1c:	bf00      	nop
 8000d1e:	371c      	adds	r7, #28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	03fff000 	.word	0x03fff000

08000d2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3360      	adds	r3, #96	@ 0x60
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3360      	adds	r3, #96	@ 0x60
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3360      	adds	r3, #96	@ 0x60
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3360      	adds	r3, #96	@ 0x60
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	615a      	str	r2, [r3, #20]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b087      	sub	sp, #28
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3330      	adds	r3, #48	@ 0x30
 8000e56:	461a      	mov	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	4413      	add	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	211f      	movs	r1, #31
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	401a      	ands	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	0e9b      	lsrs	r3, r3, #26
 8000e7e:	f003 011f 	and.w	r1, r3, #31
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e92:	bf00      	nop
 8000e94:	371c      	adds	r7, #28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b087      	sub	sp, #28
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3314      	adds	r3, #20
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	0e5b      	lsrs	r3, r3, #25
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	4413      	add	r3, r2
 8000ebc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	0d1b      	lsrs	r3, r3, #20
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2107      	movs	r1, #7
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	0d1b      	lsrs	r3, r3, #20
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ee8:	bf00      	nop
 8000eea:	371c      	adds	r7, #28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0318 	and.w	r3, r3, #24
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f18:	40d9      	lsrs	r1, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f22:	431a      	orrs	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	0007ffff 	.word	0x0007ffff

08000f3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 031f 	and.w	r3, r3, #31
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6093      	str	r3, [r2, #8]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fac:	d101      	bne.n	8000fb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000fd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000ffc:	d101      	bne.n	8001002 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001020:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <LL_ADC_IsEnabled+0x18>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <LL_ADC_IsEnabled+0x1a>
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800106e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001072:	f043 0204 	orr.w	r2, r3, #4
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	2b04      	cmp	r3, #4
 8001098:	d101      	bne.n	800109e <LL_ADC_REG_IsConversionOngoing+0x18>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d101      	bne.n	80010c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e167      	b.n	80013be <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d109      	bne.n	8001110 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fbd5 	bl	80008ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff3f 	bl	8000f98 <LL_ADC_IsDeepPowerDownEnabled>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d004      	beq.n	800112a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff25 	bl	8000f74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff5a 	bl	8000fe8 <LL_ADC_IsInternalRegulatorEnabled>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d115      	bne.n	8001166 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff3e 	bl	8000fc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001144:	4ba0      	ldr	r3, [pc, #640]	@ (80013c8 <HAL_ADC_Init+0x2f4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	099b      	lsrs	r3, r3, #6
 800114a:	4aa0      	ldr	r2, [pc, #640]	@ (80013cc <HAL_ADC_Init+0x2f8>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	099b      	lsrs	r3, r3, #6
 8001152:	3301      	adds	r3, #1
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001158:	e002      	b.n	8001160 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3b01      	subs	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f9      	bne.n	800115a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff3c 	bl	8000fe8 <LL_ADC_IsInternalRegulatorEnabled>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10d      	bne.n	8001192 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117a:	f043 0210 	orr.w	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff75 	bl	8001086 <LL_ADC_REG_IsConversionOngoing>
 800119c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 8100 	bne.w	80013ac <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 80fc 	bne.w	80013ac <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011bc:	f043 0202 	orr.w	r2, r3, #2
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff35 	bl	8001038 <LL_ADC_IsEnabled>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d111      	bne.n	80011f8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011d8:	f7ff ff2e 	bl	8001038 <LL_ADC_IsEnabled>
 80011dc:	4604      	mov	r4, r0
 80011de:	487c      	ldr	r0, [pc, #496]	@ (80013d0 <HAL_ADC_Init+0x2fc>)
 80011e0:	f7ff ff2a 	bl	8001038 <LL_ADC_IsEnabled>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4323      	orrs	r3, r4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4878      	ldr	r0, [pc, #480]	@ (80013d4 <HAL_ADC_Init+0x300>)
 80011f4:	f7ff fd42 	bl	8000c7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7f5b      	ldrb	r3, [r3, #29]
 80011fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001202:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001208:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800120e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001216:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001222:	2b01      	cmp	r3, #1
 8001224:	d106      	bne.n	8001234 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122a:	3b01      	subs	r3, #1
 800122c:	045b      	lsls	r3, r3, #17
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d009      	beq.n	8001250 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001240:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	4b60      	ldr	r3, [pc, #384]	@ (80013d8 <HAL_ADC_Init+0x304>)
 8001258:	4013      	ands	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	430b      	orrs	r3, r1
 8001262:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff14 	bl	80010ac <LL_ADC_INJ_IsConversionOngoing>
 8001284:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d16d      	bne.n	8001368 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d16a      	bne.n	8001368 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001296:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800129e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012ae:	f023 0302 	bic.w	r3, r3, #2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d017      	beq.n	80012f4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80012d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80012dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6911      	ldr	r1, [r2, #16]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	430b      	orrs	r3, r1
 80012ee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80012f2:	e013      	b.n	800131c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001302:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001318:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001322:	2b01      	cmp	r3, #1
 8001324:	d118      	bne.n	8001358 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800133c:	4311      	orrs	r1, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001342:	4311      	orrs	r1, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001348:	430a      	orrs	r2, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 0201 	orr.w	r2, r2, #1
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	e007      	b.n	8001368 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10c      	bne.n	800138a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f023 010f 	bic.w	r1, r3, #15
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
 8001388:	e007      	b.n	800139a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 020f 	bic.w	r2, r2, #15
 8001398:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013aa:	e007      	b.n	80013bc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b0:	f043 0210 	orr.w	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000004 	.word	0x20000004
 80013cc:	053e2d63 	.word	0x053e2d63
 80013d0:	50000100 	.word	0x50000100
 80013d4:	50000300 	.word	0x50000300
 80013d8:	fff04007 	.word	0xfff04007

080013dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013e4:	4859      	ldr	r0, [pc, #356]	@ (800154c <HAL_ADC_Start+0x170>)
 80013e6:	f7ff fda9 	bl	8000f3c <LL_ADC_GetMultimode>
 80013ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe48 	bl	8001086 <LL_ADC_REG_IsConversionOngoing>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 809f 	bne.w	800153c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_ADC_Start+0x30>
 8001408:	2302      	movs	r3, #2
 800140a:	e09a      	b.n	8001542 <HAL_ADC_Start+0x166>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fd73 	bl	8001f00 <ADC_Enable>
 800141a:	4603      	mov	r3, r0
 800141c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f040 8086 	bne.w	8001532 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a44      	ldr	r2, [pc, #272]	@ (8001550 <HAL_ADC_Start+0x174>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d002      	beq.n	800144a <HAL_ADC_Start+0x6e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	e001      	b.n	800144e <HAL_ADC_Start+0x72>
 800144a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	4293      	cmp	r3, r2
 8001454:	d002      	beq.n	800145c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d105      	bne.n	8001468 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001474:	d106      	bne.n	8001484 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	f023 0206 	bic.w	r2, r3, #6
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	661a      	str	r2, [r3, #96]	@ 0x60
 8001482:	e002      	b.n	800148a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	221c      	movs	r2, #28
 8001490:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2c      	ldr	r2, [pc, #176]	@ (8001550 <HAL_ADC_Start+0x174>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d002      	beq.n	80014aa <HAL_ADC_Start+0xce>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	e001      	b.n	80014ae <HAL_ADC_Start+0xd2>
 80014aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d008      	beq.n	80014c8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d002      	beq.n	80014c8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	d114      	bne.n	80014f2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fdb7 	bl	800105e <LL_ADC_REG_StartConversion>
 80014f0:	e026      	b.n	8001540 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <HAL_ADC_Start+0x174>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d002      	beq.n	800150e <HAL_ADC_Start+0x132>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	e001      	b.n	8001512 <HAL_ADC_Start+0x136>
 800150e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001512:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00f      	beq.n	8001540 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001528:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001530:	e006      	b.n	8001540 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800153a:	e001      	b.n	8001540 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800153c:	2302      	movs	r3, #2
 800153e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001540:	7dfb      	ldrb	r3, [r7, #23]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	50000300 	.word	0x50000300
 8001550:	50000100 	.word	0x50000100

08001554 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800155e:	4867      	ldr	r0, [pc, #412]	@ (80016fc <HAL_ADC_PollForConversion+0x1a8>)
 8001560:	f7ff fcec 	bl	8000f3c <LL_ADC_GetMultimode>
 8001564:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d102      	bne.n	8001574 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800156e:	2308      	movs	r3, #8
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e02a      	b.n	80015ca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d002      	beq.n	8001586 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b09      	cmp	r3, #9
 8001584:	d111      	bne.n	80015aa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001598:	f043 0220 	orr.w	r2, r3, #32
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0a6      	b.n	80016f2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015a4:	2304      	movs	r3, #4
 80015a6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015a8:	e00f      	b.n	80015ca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80015aa:	4854      	ldr	r0, [pc, #336]	@ (80016fc <HAL_ADC_PollForConversion+0x1a8>)
 80015ac:	f7ff fcd4 	bl	8000f58 <LL_ADC_GetMultiDMATransfer>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ba:	f043 0220 	orr.w	r2, r3, #32
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e095      	b.n	80016f2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015c6:	2304      	movs	r3, #4
 80015c8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015ca:	f7ff fb29 	bl	8000c20 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015d0:	e021      	b.n	8001616 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015d8:	d01d      	beq.n	8001616 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015da:	f7ff fb21 	bl	8000c20 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d302      	bcc.n	80015f0 <HAL_ADC_PollForConversion+0x9c>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d112      	bne.n	8001616 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10b      	bne.n	8001616 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001602:	f043 0204 	orr.w	r2, r3, #4
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e06d      	b.n	80016f2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0d6      	beq.n	80015d2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fbf3 	bl	8000e20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01c      	beq.n	800167a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7f5b      	ldrb	r3, [r3, #29]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d118      	bne.n	800167a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b08      	cmp	r3, #8
 8001654:	d111      	bne.n	800167a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001666:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a20      	ldr	r2, [pc, #128]	@ (8001700 <HAL_ADC_PollForConversion+0x1ac>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d002      	beq.n	800168a <HAL_ADC_PollForConversion+0x136>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	e001      	b.n	800168e <HAL_ADC_PollForConversion+0x13a>
 800168a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4293      	cmp	r3, r2
 8001694:	d008      	beq.n	80016a8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d002      	beq.n	80016a8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d104      	bne.n	80016b2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	e00d      	b.n	80016ce <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <HAL_ADC_PollForConversion+0x1ac>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d002      	beq.n	80016c2 <HAL_ADC_PollForConversion+0x16e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	e001      	b.n	80016c6 <HAL_ADC_PollForConversion+0x172>
 80016c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d104      	bne.n	80016de <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2208      	movs	r2, #8
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e008      	b.n	80016f0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d103      	bne.n	80016f0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	220c      	movs	r2, #12
 80016ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	50000300 	.word	0x50000300
 8001700:	50000100 	.word	0x50000100

08001704 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0b6      	sub	sp, #216	@ 0xd8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x22>
 800173e:	2302      	movs	r3, #2
 8001740:	e3c8      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x7b4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fc99 	bl	8001086 <LL_ADC_REG_IsConversionOngoing>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 83ad 	bne.w	8001eb6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	f7ff fb6c 	bl	8000e46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc87 	bl	8001086 <LL_ADC_REG_IsConversionOngoing>
 8001778:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fc93 	bl	80010ac <LL_ADC_INJ_IsConversionOngoing>
 8001786:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800178a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 81d9 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 81d4 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017a6:	d10f      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fb73 	bl	8000e9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb1a 	bl	8000dfa <LL_ADC_SetSamplingTimeCommonConfig>
 80017c6:	e00e      	b.n	80017e6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	461a      	mov	r2, r3
 80017d6:	f7ff fb62 	bl	8000e9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fb0a 	bl	8000dfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b04      	cmp	r3, #4
 8001806:	d022      	beq.n	800184e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6919      	ldr	r1, [r3, #16]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001818:	f7ff fa64 	bl	8000ce4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6919      	ldr	r1, [r3, #16]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	461a      	mov	r2, r3
 800182a:	f7ff fab0 	bl	8000d8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x124>
 800183e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001842:	e000      	b.n	8001846 <HAL_ADC_ConfigChannel+0x126>
 8001844:	2300      	movs	r3, #0
 8001846:	461a      	mov	r2, r3
 8001848:	f7ff fabc 	bl	8000dc4 <LL_ADC_SetOffsetSaturation>
 800184c:	e17b      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa69 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <HAL_ADC_ConfigChannel+0x15a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fa5e 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	0e9b      	lsrs	r3, r3, #26
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	e01e      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x198>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa53 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001898:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800189c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80018a8:	2320      	movs	r3, #32
 80018aa:	e004      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80018ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1b0>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0e9b      	lsrs	r3, r3, #26
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	e018      	b.n	8001902 <HAL_ADC_ConfigChannel+0x1e2>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80018e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80018ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80018f4:	2320      	movs	r3, #32
 80018f6:	e004      	b.n	8001902 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80018f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001902:	429a      	cmp	r2, r3
 8001904:	d106      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fa22 	bl	8000d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa06 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x220>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f9fb 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	f003 021f 	and.w	r2, r3, #31
 800193e:	e01e      	b.n	800197e <HAL_ADC_ConfigChannel+0x25e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f9f0 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800195e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800196e:	2320      	movs	r3, #32
 8001970:	e004      	b.n	800197c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x276>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0e9b      	lsrs	r3, r3, #26
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	e018      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x2a8>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80019aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80019b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80019ba:	2320      	movs	r3, #32
 80019bc:	e004      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80019be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d106      	bne.n	80019da <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f9bf 	bl	8000d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2102      	movs	r1, #2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f9a3 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x2e6>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2102      	movs	r1, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f998 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	0e9b      	lsrs	r3, r3, #26
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	e01e      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x324>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f98d 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001a34:	2320      	movs	r3, #32
 8001a36:	e004      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x33c>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	e016      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x36a>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001a6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d106      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f95e 	bl	8000d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f942 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x3a8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f937 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	e017      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x3d8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2103      	movs	r1, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f92c 	bl	8000d2c <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ae0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x3f0>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	e011      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x414>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001b1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2103      	movs	r1, #3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f909 	bl	8000d58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fa74 	bl	8001038 <LL_ADC_IsEnabled>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8140 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7ff f9c5 	bl	8000ef4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4a8f      	ldr	r2, [pc, #572]	@ (8001dac <HAL_ADC_ConfigChannel+0x68c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 8131 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x47e>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	bf94      	ite	ls
 8001b96:	2301      	movls	r3, #1
 8001b98:	2300      	movhi	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e019      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x4b2>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001bac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001bba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	bf94      	ite	ls
 8001bcc:	2301      	movls	r3, #1
 8001bce:	2300      	movhi	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d079      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x4d2>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0e9b      	lsrs	r3, r3, #26
 8001be8:	3301      	adds	r3, #1
 8001bea:	069b      	lsls	r3, r3, #26
 8001bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bf0:	e015      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x4fe>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	069b      	lsls	r3, r3, #26
 8001c1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x51e>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0e9b      	lsrs	r3, r3, #26
 8001c30:	3301      	adds	r3, #1
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	e017      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x54e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e003      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	ea42 0103 	orr.w	r1, r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x574>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	3301      	adds	r3, #1
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	e018      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x5a6>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	e081      	b.n	8001dce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x5c6>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	3301      	adds	r3, #1
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce4:	e015      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x5f2>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e003      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	069b      	lsls	r3, r3, #26
 8001d0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x612>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	e017      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x642>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	61fb      	str	r3, [r7, #28]
  return result;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	ea42 0103 	orr.w	r1, r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x66e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1e      	subs	r3, #30
 8001d86:	051b      	lsls	r3, r3, #20
 8001d88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d8c:	e01e      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x6ac>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	613b      	str	r3, [r7, #16]
  return result;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e006      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x698>
 8001daa:	bf00      	nop
 8001dac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	051b      	lsls	r3, r3, #20
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff f863 	bl	8000e9e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8001edc <HAL_ADC_ConfigChannel+0x7bc>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d071      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	483e      	ldr	r0, [pc, #248]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001de6:	f7fe ff6f 	bl	8000cc8 <LL_ADC_GetCommonPathInternalCh>
 8001dea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d004      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x6e2>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d127      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d121      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e16:	d157      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e20:	4619      	mov	r1, r3
 8001e22:	482f      	ldr	r0, [pc, #188]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e24:	f7fe ff3d 	bl	8000ca2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e28:	4b30      	ldr	r3, [pc, #192]	@ (8001eec <HAL_ADC_ConfigChannel+0x7cc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	4a30      	ldr	r2, [pc, #192]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e42:	e002      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e50:	e03a      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d113      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02a      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4818      	ldr	r0, [pc, #96]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e7e:	f7fe ff10 	bl	8000ca2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e82:	e021      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <HAL_ADC_ConfigChannel+0x7dc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a16      	ldr	r2, [pc, #88]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d011      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ea8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eac:	4619      	mov	r1, r3
 8001eae:	480c      	ldr	r0, [pc, #48]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eb0:	f7fe fef7 	bl	8000ca2 <LL_ADC_SetCommonPathInternalCh>
 8001eb4:	e008      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	f043 0220 	orr.w	r2, r3, #32
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ed0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	37d8      	adds	r7, #216	@ 0xd8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	80080000 	.word	0x80080000
 8001ee0:	50000300 	.word	0x50000300
 8001ee4:	c3210000 	.word	0xc3210000
 8001ee8:	90c00010 	.word	0x90c00010
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	053e2d63 	.word	0x053e2d63
 8001ef4:	c7520000 	.word	0xc7520000
 8001ef8:	50000100 	.word	0x50000100
 8001efc:	cb840000 	.word	0xcb840000

08001f00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f891 	bl	8001038 <LL_ADC_IsEnabled>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d169      	bne.n	8001ff0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <ADC_Enable+0xfc>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e055      	b.n	8001ff2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f860 	bl	8001010 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f50:	482b      	ldr	r0, [pc, #172]	@ (8002000 <ADC_Enable+0x100>)
 8001f52:	f7fe feb9 	bl	8000cc8 <LL_ADC_GetCommonPathInternalCh>
 8001f56:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f60:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <ADC_Enable+0x104>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	4a28      	ldr	r2, [pc, #160]	@ (8002008 <ADC_Enable+0x108>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f7a:	e002      	b.n	8001f82 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fe4a 	bl	8000c20 <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f8e:	e028      	b.n	8001fe2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f84f 	bl	8001038 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f833 	bl	8001010 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001faa:	f7fe fe39 	bl	8000c20 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d914      	bls.n	8001fe2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d00d      	beq.n	8001fe2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e007      	b.n	8001ff2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d1cf      	bne.n	8001f90 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	8000003f 	.word	0x8000003f
 8002000:	50000300 	.word	0x50000300
 8002004:	20000004 	.word	0x20000004
 8002008:	053e2d63 	.word	0x053e2d63

0800200c <LL_ADC_IsEnabled>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <LL_ADC_IsEnabled+0x18>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <LL_ADC_IsEnabled+0x1a>
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_REG_IsConversionOngoing>:
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b04      	cmp	r3, #4
 8002044:	d101      	bne.n	800204a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b0a1      	sub	sp, #132	@ 0x84
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002072:	2302      	movs	r3, #2
 8002074:	e08b      	b.n	800218e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800207e:	2300      	movs	r3, #0
 8002080:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002082:	2300      	movs	r3, #0
 8002084:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208e:	d102      	bne.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002090:	4b41      	ldr	r3, [pc, #260]	@ (8002198 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e001      	b.n	800209a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e06a      	b.n	800218e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ffb9 	bl	8002032 <LL_ADC_REG_IsConversionOngoing>
 80020c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ffb3 	bl	8002032 <LL_ADC_REG_IsConversionOngoing>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d14c      	bne.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80020d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d149      	bne.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020d8:	4b30      	ldr	r3, [pc, #192]	@ (800219c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80020da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d028      	beq.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020f6:	035b      	lsls	r3, r3, #13
 80020f8:	430b      	orrs	r3, r1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002100:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002104:	f7ff ff82 	bl	800200c <LL_ADC_IsEnabled>
 8002108:	4604      	mov	r4, r0
 800210a:	4823      	ldr	r0, [pc, #140]	@ (8002198 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800210c:	f7ff ff7e 	bl	800200c <LL_ADC_IsEnabled>
 8002110:	4603      	mov	r3, r0
 8002112:	4323      	orrs	r3, r4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d133      	bne.n	8002180 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002120:	f023 030f 	bic.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	6811      	ldr	r1, [r2, #0]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6892      	ldr	r2, [r2, #8]
 800212c:	430a      	orrs	r2, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002132:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002134:	e024      	b.n	8002180 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800213e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002140:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002142:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002146:	f7ff ff61 	bl	800200c <LL_ADC_IsEnabled>
 800214a:	4604      	mov	r4, r0
 800214c:	4812      	ldr	r0, [pc, #72]	@ (8002198 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800214e:	f7ff ff5d 	bl	800200c <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	4323      	orrs	r3, r4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d112      	bne.n	8002180 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800215a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002162:	f023 030f 	bic.w	r3, r3, #15
 8002166:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002168:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800216a:	e009      	b.n	8002180 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800217e:	e000      	b.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002180:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800218a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800218e:	4618      	mov	r0, r3
 8002190:	3784      	adds	r7, #132	@ 0x84
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	bf00      	nop
 8002198:	50000100 	.word	0x50000100
 800219c:	50000300 	.word	0x50000300

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	@ (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff40 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff90 	bl	8002294 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5f 	bl	8002240 <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff33 	bl	8002204 <__NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffa4 	bl	80022fc <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023ce:	e15a      	b.n	8002686 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2101      	movs	r1, #1
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 814c 	beq.w	8002680 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d005      	beq.n	8002400 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d130      	bne.n	8002462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002436:	2201      	movs	r2, #1
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 0201 	and.w	r2, r3, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b03      	cmp	r3, #3
 800246c:	d017      	beq.n	800249e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d123      	bne.n	80024f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	6939      	ldr	r1, [r7, #16]
 80024ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a6 	beq.w	8002680 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002534:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <HAL_GPIO_Init+0x2e4>)
 8002536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002538:	4a5a      	ldr	r2, [pc, #360]	@ (80026a4 <HAL_GPIO_Init+0x2e4>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002540:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <HAL_GPIO_Init+0x2e4>)
 8002542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254c:	4a56      	ldr	r2, [pc, #344]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002576:	d01f      	beq.n	80025b8 <HAL_GPIO_Init+0x1f8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4c      	ldr	r2, [pc, #304]	@ (80026ac <HAL_GPIO_Init+0x2ec>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d019      	beq.n	80025b4 <HAL_GPIO_Init+0x1f4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4b      	ldr	r2, [pc, #300]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <HAL_GPIO_Init+0x1f0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a4a      	ldr	r2, [pc, #296]	@ (80026b4 <HAL_GPIO_Init+0x2f4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00d      	beq.n	80025ac <HAL_GPIO_Init+0x1ec>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a49      	ldr	r2, [pc, #292]	@ (80026b8 <HAL_GPIO_Init+0x2f8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d007      	beq.n	80025a8 <HAL_GPIO_Init+0x1e8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a48      	ldr	r2, [pc, #288]	@ (80026bc <HAL_GPIO_Init+0x2fc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_GPIO_Init+0x1e4>
 80025a0:	2305      	movs	r3, #5
 80025a2:	e00a      	b.n	80025ba <HAL_GPIO_Init+0x1fa>
 80025a4:	2306      	movs	r3, #6
 80025a6:	e008      	b.n	80025ba <HAL_GPIO_Init+0x1fa>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e006      	b.n	80025ba <HAL_GPIO_Init+0x1fa>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e004      	b.n	80025ba <HAL_GPIO_Init+0x1fa>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e002      	b.n	80025ba <HAL_GPIO_Init+0x1fa>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_GPIO_Init+0x1fa>
 80025b8:	2300      	movs	r3, #0
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	f002 0203 	and.w	r2, r2, #3
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	4093      	lsls	r3, r2
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ca:	4937      	ldr	r1, [pc, #220]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d8:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025fc:	4a30      	ldr	r2, [pc, #192]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002602:	4b2f      	ldr	r3, [pc, #188]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002626:	4a26      	ldr	r2, [pc, #152]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800262c:	4b24      	ldr	r3, [pc, #144]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002650:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002656:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800267a:	4a11      	ldr	r2, [pc, #68]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f ae9d 	bne.w	80023d0 <HAL_GPIO_Init+0x10>
  }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010000 	.word	0x40010000
 80026ac:	48000400 	.word	0x48000400
 80026b0:	48000800 	.word	0x48000800
 80026b4:	48000c00 	.word	0x48000c00
 80026b8:	48001000 	.word	0x48001000
 80026bc:	48001400 	.word	0x48001400
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026fe:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800270a:	4a05      	ldr	r2, [pc, #20]	@ (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fd80 	bl	8000218 <HAL_GPIO_EXTI_Callback>
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d141      	bne.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002732:	4b4b      	ldr	r3, [pc, #300]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d131      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002740:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002746:	4a46      	ldr	r2, [pc, #280]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800274c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002750:	4b43      	ldr	r3, [pc, #268]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002758:	4a41      	ldr	r2, [pc, #260]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800275e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002760:	4b40      	ldr	r3, [pc, #256]	@ (8002864 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2232      	movs	r2, #50	@ 0x32
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4a3f      	ldr	r2, [pc, #252]	@ (8002868 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	0c9b      	lsrs	r3, r3, #18
 8002772:	3301      	adds	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002776:	e002      	b.n	800277e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b01      	subs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277e:	4b38      	ldr	r3, [pc, #224]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278a:	d102      	bne.n	8002792 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f2      	bne.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002792:	4b33      	ldr	r3, [pc, #204]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279e:	d158      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e057      	b.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80027b4:	e04d      	b.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027bc:	d141      	bne.n	8002842 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027be:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ca:	d131      	bne.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d2:	4a23      	ldr	r2, [pc, #140]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027dc:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2232      	movs	r2, #50	@ 0x32
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002802:	e002      	b.n	800280a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3b01      	subs	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002816:	d102      	bne.n	800281e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f2      	bne.n	8002804 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282a:	d112      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e011      	b.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002836:	4a0a      	ldr	r2, [pc, #40]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002840:	e007      	b.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800284a:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002850:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40007000 	.word	0x40007000
 8002864:	20000004 	.word	0x20000004
 8002868:	431bde83 	.word	0x431bde83

0800286c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800287a:	6093      	str	r3, [r2, #8]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40007000 	.word	0x40007000

0800288c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e2fe      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b97      	ldr	r3, [pc, #604]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b94      	ldr	r3, [pc, #592]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x3e>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_OscConfig+0x44>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d157      	bne.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e2d9      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x74>
 80028f2:	4b85      	ldr	r3, [pc, #532]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a84      	ldr	r2, [pc, #528]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b7c      	ldr	r3, [pc, #496]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7b      	ldr	r2, [pc, #492]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002924:	4b78      	ldr	r3, [pc, #480]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a77      	ldr	r2, [pc, #476]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b75      	ldr	r3, [pc, #468]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a74      	ldr	r2, [pc, #464]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe f96c 	bl	8000c20 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7fe f968 	bl	8000c20 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	@ 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e29e      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xc0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe f958 	bl	8000c20 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe f954 	bl	8000c20 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	@ 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e28a      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002986:	4b60      	ldr	r3, [pc, #384]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d075      	beq.n	8002a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a2:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ac:	4b56      	ldr	r3, [pc, #344]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_OscConfig+0x136>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_OscConfig+0x13c>
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11f      	bne.n	8002a08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x154>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e25d      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	4946      	ldr	r1, [pc, #280]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029f4:	4b45      	ldr	r3, [pc, #276]	@ (8002b0c <HAL_RCC_OscConfig+0x280>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe f8c5 	bl	8000b88 <HAL_InitTick>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d043      	beq.n	8002a8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e249      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3c      	ldr	r2, [pc, #240]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe f900 	bl	8000c20 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe f8fc 	bl	8000c20 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e232      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a36:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	492d      	ldr	r1, [pc, #180]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e01a      	b.n	8002a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe f8dc 	bl	8000c20 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7fe f8d8 	bl	8000c20 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e20e      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1e0>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d041      	beq.n	8002b1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01c      	beq.n	8002adc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa2:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa8:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe f8b5 	bl	8000c20 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe f8b1 	bl	8000c20 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e1e7      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ef      	beq.n	8002aba <HAL_RCC_OscConfig+0x22e>
 8002ada:	e020      	b.n	8002b1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae2:	4a09      	ldr	r2, [pc, #36]	@ (8002b08 <HAL_RCC_OscConfig+0x27c>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe f898 	bl	8000c20 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af2:	e00d      	b.n	8002b10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe f894 	bl	8000c20 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d906      	bls.n	8002b10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1ca      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b10:	4b8c      	ldr	r3, [pc, #560]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ea      	bne.n	8002af4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a6 	beq.w	8002c78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b30:	4b84      	ldr	r3, [pc, #528]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2b4>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x2b6>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b7f      	ldr	r3, [pc, #508]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b52:	4b7c      	ldr	r3, [pc, #496]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b62:	4b79      	ldr	r3, [pc, #484]	@ (8002d48 <HAL_RCC_OscConfig+0x4bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d118      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b6e:	4b76      	ldr	r3, [pc, #472]	@ (8002d48 <HAL_RCC_OscConfig+0x4bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a75      	ldr	r2, [pc, #468]	@ (8002d48 <HAL_RCC_OscConfig+0x4bc>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe f851 	bl	8000c20 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fe f84d 	bl	8000c20 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e183      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b94:	4b6c      	ldr	r3, [pc, #432]	@ (8002d48 <HAL_RCC_OscConfig+0x4bc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d108      	bne.n	8002bba <HAL_RCC_OscConfig+0x32e>
 8002ba8:	4b66      	ldr	r3, [pc, #408]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bae:	4a65      	ldr	r2, [pc, #404]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb8:	e024      	b.n	8002c04 <HAL_RCC_OscConfig+0x378>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d110      	bne.n	8002be4 <HAL_RCC_OscConfig+0x358>
 8002bc2:	4b60      	ldr	r3, [pc, #384]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002be2:	e00f      	b.n	8002c04 <HAL_RCC_OscConfig+0x378>
 8002be4:	4b57      	ldr	r3, [pc, #348]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bea:	4a56      	ldr	r2, [pc, #344]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bf4:	4b53      	ldr	r3, [pc, #332]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfa:	4a52      	ldr	r2, [pc, #328]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe f808 	bl	8000c20 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe f804 	bl	8000c20 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e138      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ed      	beq.n	8002c14 <HAL_RCC_OscConfig+0x388>
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fd fff1 	bl	8000c20 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fd ffed 	bl	8000c20 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e121      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c58:	4b3a      	ldr	r3, [pc, #232]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ed      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b35      	ldr	r3, [pc, #212]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	4a34      	ldr	r2, [pc, #208]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c92:	4a2c      	ldr	r2, [pc, #176]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fd ffc0 	bl	8000c20 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca4:	f7fd ffbc 	bl	8000c20 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0f2      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cb6:	4b23      	ldr	r3, [pc, #140]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x418>
 8002cc4:	e01b      	b.n	8002cfe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fd ffa3 	bl	8000c20 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cde:	f7fd ff9f 	bl	8000c20 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0d5      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf0:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ef      	bne.n	8002cde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80c9 	beq.w	8002e9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d08:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	f000 8083 	beq.w	8002e1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d15e      	bne.n	8002ddc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a08      	ldr	r2, [pc, #32]	@ (8002d44 <HAL_RCC_OscConfig+0x4b8>)
 8002d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fd ff79 	bl	8000c20 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d30:	e00c      	b.n	8002d4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fd ff75 	bl	8000c20 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d905      	bls.n	8002d4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0ab      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ec      	bne.n	8002d32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d58:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4b52      	ldr	r3, [pc, #328]	@ (8002ea8 <HAL_RCC_OscConfig+0x61c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6a11      	ldr	r1, [r2, #32]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d68:	3a01      	subs	r2, #1
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	4311      	orrs	r1, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d72:	0212      	lsls	r2, r2, #8
 8002d74:	4311      	orrs	r1, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d7a:	0852      	lsrs	r2, r2, #1
 8002d7c:	3a01      	subs	r2, #1
 8002d7e:	0552      	lsls	r2, r2, #21
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d86:	0852      	lsrs	r2, r2, #1
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	0652      	lsls	r2, r2, #25
 8002d8c:	4311      	orrs	r1, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d92:	06d2      	lsls	r2, r2, #27
 8002d94:	430a      	orrs	r2, r1
 8002d96:	4943      	ldr	r1, [pc, #268]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a40      	ldr	r2, [pc, #256]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a3d      	ldr	r2, [pc, #244]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fd ff34 	bl	8000c20 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fd ff30 	bl	8000c20 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e066      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	4b35      	ldr	r3, [pc, #212]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x530>
 8002dda:	e05e      	b.n	8002e9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b31      	ldr	r3, [pc, #196]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a30      	ldr	r2, [pc, #192]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fd ff1a 	bl	8000c20 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fd ff16 	bl	8000c20 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e04c      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e02:	4b28      	ldr	r3, [pc, #160]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4924      	ldr	r1, [pc, #144]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002e14:	4b25      	ldr	r3, [pc, #148]	@ (8002eac <HAL_RCC_OscConfig+0x620>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	60cb      	str	r3, [r1, #12]
 8002e1a:	e03e      	b.n	8002e9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e039      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_RCC_OscConfig+0x618>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d12c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	3b01      	subs	r3, #1
 8002e48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d123      	bne.n	8002e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d11b      	bne.n	8002e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d113      	bne.n	8002e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	019f800c 	.word	0x019f800c
 8002eac:	feeefffc 	.word	0xfeeefffc

08002eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e11e      	b.n	8003106 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b91      	ldr	r3, [pc, #580]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b8e      	ldr	r3, [pc, #568]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	498c      	ldr	r1, [pc, #560]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b8a      	ldr	r3, [pc, #552]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e106      	b.n	8003106 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d073      	beq.n	8002fec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d129      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	4b81      	ldr	r3, [pc, #516]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0f4      	b.n	8003106 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f1c:	f000 f966 	bl	80031ec <RCC_GetSysClockFreqFromPLLSource>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4a7c      	ldr	r2, [pc, #496]	@ (8003118 <HAL_RCC_ClockConfig+0x268>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d93f      	bls.n	8002faa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d033      	beq.n	8002faa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d12f      	bne.n	8002faa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f4a:	4b72      	ldr	r3, [pc, #456]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f52:	4a70      	ldr	r2, [pc, #448]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e024      	b.n	8002faa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f68:	4b6a      	ldr	r3, [pc, #424]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0c6      	b.n	8003106 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f78:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0be      	b.n	8003106 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f88:	f000 f8ce 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4a61      	ldr	r2, [pc, #388]	@ (8003118 <HAL_RCC_ClockConfig+0x268>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d909      	bls.n	8002faa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f96:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f9e:	4a5d      	ldr	r2, [pc, #372]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b5a      	ldr	r3, [pc, #360]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4957      	ldr	r1, [pc, #348]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fd fe30 	bl	8000c20 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd fe2c 	bl	8000c20 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e095      	b.n	8003106 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b4e      	ldr	r3, [pc, #312]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b43      	ldr	r3, [pc, #268]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a42      	ldr	r2, [pc, #264]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 800300a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800300e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800301c:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003024:	4a3b      	ldr	r2, [pc, #236]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8003026:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800302a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4936      	ldr	r1, [pc, #216]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
 800303e:	e008      	b.n	8003052 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b80      	cmp	r3, #128	@ 0x80
 8003044:	d105      	bne.n	8003052 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003046:	4b33      	ldr	r3, [pc, #204]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4a32      	ldr	r2, [pc, #200]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 800304c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003050:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003052:	4b2f      	ldr	r3, [pc, #188]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d21d      	bcs.n	800309c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003060:	4b2b      	ldr	r3, [pc, #172]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 020f 	bic.w	r2, r3, #15
 8003068:	4929      	ldr	r1, [pc, #164]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003070:	f7fd fdd6 	bl	8000c20 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fd fdd2 	bl	8000c20 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e03b      	b.n	8003106 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b20      	ldr	r3, [pc, #128]	@ (8003110 <HAL_RCC_ClockConfig+0x260>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d1ed      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4917      	ldr	r1, [pc, #92]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c6:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	490f      	ldr	r1, [pc, #60]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030da:	f000 f825 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030de:	4602      	mov	r2, r0
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <HAL_RCC_ClockConfig+0x264>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	490c      	ldr	r1, [pc, #48]	@ (800311c <HAL_RCC_ClockConfig+0x26c>)
 80030ec:	5ccb      	ldrb	r3, [r1, r3]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <HAL_RCC_ClockConfig+0x270>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_RCC_ClockConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fd42 	bl	8000b88 <HAL_InitTick>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	04c4b400 	.word	0x04c4b400
 800311c:	08004918 	.word	0x08004918
 8003120:	20000004 	.word	0x20000004
 8003124:	20000008 	.word	0x20000008

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800312e:	4b2c      	ldr	r3, [pc, #176]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b04      	cmp	r3, #4
 8003138:	d102      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800313a:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	e047      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003140:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d102      	bne.n	8003152 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800314c:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	e03e      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003152:	4b23      	ldr	r3, [pc, #140]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d136      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800315e:	4b20      	ldr	r3, [pc, #128]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003168:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d10c      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800317c:	4a1a      	ldr	r2, [pc, #104]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	4a16      	ldr	r2, [pc, #88]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003186:	68d2      	ldr	r2, [r2, #12]
 8003188:	0a12      	lsrs	r2, r2, #8
 800318a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	617b      	str	r3, [r7, #20]
      break;
 8003194:	e00c      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003196:	4a13      	ldr	r2, [pc, #76]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	4a10      	ldr	r2, [pc, #64]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	0a12      	lsrs	r2, r2, #8
 80031a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]
      break;
 80031ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0e5b      	lsrs	r3, r3, #25
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e001      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031d0:	693b      	ldr	r3, [r7, #16]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	00f42400 	.word	0x00f42400
 80031e8:	007a1200 	.word	0x007a1200

080031ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031f2:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d10c      	bne.n	800322a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003210:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800321a:	68d2      	ldr	r2, [r2, #12]
 800321c:	0a12      	lsrs	r2, r2, #8
 800321e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	617b      	str	r3, [r7, #20]
    break;
 8003228:	e00c      	b.n	8003244 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800322a:	4a12      	ldr	r2, [pc, #72]	@ (8003274 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	4a0e      	ldr	r2, [pc, #56]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003234:	68d2      	ldr	r2, [r2, #12]
 8003236:	0a12      	lsrs	r2, r2, #8
 8003238:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
    break;
 8003242:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0e5b      	lsrs	r3, r3, #25
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800325e:	687b      	ldr	r3, [r7, #4]
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	007a1200 	.word	0x007a1200
 8003274:	00f42400 	.word	0x00f42400

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003280:	2300      	movs	r3, #0
 8003282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003284:	2300      	movs	r3, #0
 8003286:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8098 	beq.w	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b40      	ldr	r3, [pc, #256]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	4a3f      	ldr	r2, [pc, #252]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b2:	4b3d      	ldr	r3, [pc, #244]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c2:	4b3a      	ldr	r3, [pc, #232]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a39      	ldr	r2, [pc, #228]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ce:	f7fd fca7 	bl	8000c20 <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d4:	e009      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fd fca3 	bl	8000c20 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d902      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	74fb      	strb	r3, [r7, #19]
        break;
 80032e8:	e005      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ea:	4b30      	ldr	r3, [pc, #192]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ef      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d159      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032fc:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01e      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	d019      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003318:	4b23      	ldr	r3, [pc, #140]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003324:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	4a1f      	ldr	r2, [pc, #124]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003334:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003344:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fd fc63 	bl	8000c20 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335c:	e00b      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fd fc5f 	bl	8000c20 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d902      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	74fb      	strb	r3, [r7, #19]
            break;
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ec      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	4903      	ldr	r1, [pc, #12]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033a0:	e008      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	74bb      	strb	r3, [r7, #18]
 80033a6:	e005      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b4:	7c7b      	ldrb	r3, [r7, #17]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	4aa5      	ldr	r2, [pc, #660]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d2:	4ba0      	ldr	r3, [pc, #640]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f023 0203 	bic.w	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	499c      	ldr	r1, [pc, #624]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f4:	4b97      	ldr	r3, [pc, #604]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 020c 	bic.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4994      	ldr	r1, [pc, #592]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003416:	4b8f      	ldr	r3, [pc, #572]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	498b      	ldr	r1, [pc, #556]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003438:	4b86      	ldr	r3, [pc, #536]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	4983      	ldr	r1, [pc, #524]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800345a:	4b7e      	ldr	r3, [pc, #504]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	497a      	ldr	r1, [pc, #488]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800347c:	4b75      	ldr	r3, [pc, #468]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4972      	ldr	r1, [pc, #456]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800349e:	4b6d      	ldr	r3, [pc, #436]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4969      	ldr	r1, [pc, #420]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c0:	4b64      	ldr	r3, [pc, #400]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4961      	ldr	r1, [pc, #388]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	4958      	ldr	r1, [pc, #352]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003504:	4b53      	ldr	r3, [pc, #332]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	4950      	ldr	r1, [pc, #320]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003524:	4b4b      	ldr	r3, [pc, #300]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a4a      	ldr	r2, [pc, #296]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800353c:	4b45      	ldr	r3, [pc, #276]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	4942      	ldr	r1, [pc, #264]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800355a:	d105      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355c:	4b3d      	ldr	r3, [pc, #244]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a3c      	ldr	r2, [pc, #240]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003566:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003574:	4b37      	ldr	r3, [pc, #220]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4934      	ldr	r1, [pc, #208]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003592:	d105      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003594:	4b2f      	ldr	r3, [pc, #188]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a2e      	ldr	r2, [pc, #184]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800359e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ac:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ba:	4926      	ldr	r1, [pc, #152]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ca:	d105      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035cc:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a20      	ldr	r2, [pc, #128]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	4918      	ldr	r1, [pc, #96]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003602:	d105      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003604:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a12      	ldr	r2, [pc, #72]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800360e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800361c:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	490a      	ldr	r1, [pc, #40]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800363a:	d105      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800363c:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a04      	ldr	r2, [pc, #16]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003646:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003648:	7cbb      	ldrb	r3, [r7, #18]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000

08003658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e049      	b.n	80036fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd f968 	bl	8000954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f000 fba4 	bl	8003de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e049      	b.n	80037ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f841 	bl	80037b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f000 fb4d 	bl	8003de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_TIM_PWM_Start+0x24>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e03c      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d109      	bne.n	8003806 <HAL_TIM_PWM_Start+0x3e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	e02f      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d109      	bne.n	8003820 <HAL_TIM_PWM_Start+0x58>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e022      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d109      	bne.n	800383a <HAL_TIM_PWM_Start+0x72>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e015      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b10      	cmp	r3, #16
 800383e:	d109      	bne.n	8003854 <HAL_TIM_PWM_Start+0x8c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e008      	b.n	8003866 <HAL_TIM_PWM_Start+0x9e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e097      	b.n	800399e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start+0xb6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800387c:	e023      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0xc6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800388c:	e01b      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0xd6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800389c:	e013      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0xe6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038ac:	e00b      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d104      	bne.n	80038be <HAL_TIM_PWM_Start+0xf6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038bc:	e003      	b.n	80038c6 <HAL_TIM_PWM_Start+0xfe>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	6839      	ldr	r1, [r7, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 feb6 	bl	8004640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a33      	ldr	r2, [pc, #204]	@ (80039a8 <HAL_TIM_PWM_Start+0x1e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a32      	ldr	r2, [pc, #200]	@ (80039ac <HAL_TIM_PWM_Start+0x1e4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a30      	ldr	r2, [pc, #192]	@ (80039b0 <HAL_TIM_PWM_Start+0x1e8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <HAL_TIM_PWM_Start+0x1ec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIM_PWM_Start+0x13e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2d      	ldr	r2, [pc, #180]	@ (80039b8 <HAL_TIM_PWM_Start+0x1f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_TIM_PWM_Start+0x142>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_TIM_PWM_Start+0x144>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a20      	ldr	r2, [pc, #128]	@ (80039a8 <HAL_TIM_PWM_Start+0x1e0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d018      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003932:	d013      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a20      	ldr	r2, [pc, #128]	@ (80039bc <HAL_TIM_PWM_Start+0x1f4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1f      	ldr	r2, [pc, #124]	@ (80039c0 <HAL_TIM_PWM_Start+0x1f8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a17      	ldr	r2, [pc, #92]	@ (80039ac <HAL_TIM_PWM_Start+0x1e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_TIM_PWM_Start+0x194>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a16      	ldr	r2, [pc, #88]	@ (80039b0 <HAL_TIM_PWM_Start+0x1e8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d115      	bne.n	8003988 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <HAL_TIM_PWM_Start+0x1fc>)
 8003964:	4013      	ands	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d015      	beq.n	800399a <HAL_TIM_PWM_Start+0x1d2>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d011      	beq.n	800399a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	e008      	b.n	800399a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e000      	b.n	800399c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40013400 	.word	0x40013400
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40014400 	.word	0x40014400
 80039b8:	40014800 	.word	0x40014800
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	00010007 	.word	0x00010007

080039c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0ff      	b.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b14      	cmp	r3, #20
 80039f2:	f200 80f0 	bhi.w	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003bd7 	.word	0x08003bd7
 8003a04:	08003bd7 	.word	0x08003bd7
 8003a08:	08003bd7 	.word	0x08003bd7
 8003a0c:	08003a91 	.word	0x08003a91
 8003a10:	08003bd7 	.word	0x08003bd7
 8003a14:	08003bd7 	.word	0x08003bd7
 8003a18:	08003bd7 	.word	0x08003bd7
 8003a1c:	08003ad3 	.word	0x08003ad3
 8003a20:	08003bd7 	.word	0x08003bd7
 8003a24:	08003bd7 	.word	0x08003bd7
 8003a28:	08003bd7 	.word	0x08003bd7
 8003a2c:	08003b13 	.word	0x08003b13
 8003a30:	08003bd7 	.word	0x08003bd7
 8003a34:	08003bd7 	.word	0x08003bd7
 8003a38:	08003bd7 	.word	0x08003bd7
 8003a3c:	08003b55 	.word	0x08003b55
 8003a40:	08003bd7 	.word	0x08003bd7
 8003a44:	08003bd7 	.word	0x08003bd7
 8003a48:	08003bd7 	.word	0x08003bd7
 8003a4c:	08003b95 	.word	0x08003b95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fa60 	bl	8003f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0208 	orr.w	r2, r2, #8
 8003a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6999      	ldr	r1, [r3, #24]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	619a      	str	r2, [r3, #24]
      break;
 8003a8e:	e0a5      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fad0 	bl	800403c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6999      	ldr	r1, [r3, #24]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	619a      	str	r2, [r3, #24]
      break;
 8003ad0:	e084      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fb39 	bl	8004150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0208 	orr.w	r2, r2, #8
 8003aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69da      	ldr	r2, [r3, #28]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0204 	bic.w	r2, r2, #4
 8003afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69d9      	ldr	r1, [r3, #28]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	61da      	str	r2, [r3, #28]
      break;
 8003b10:	e064      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fba1 	bl	8004260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	021a      	lsls	r2, r3, #8
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	61da      	str	r2, [r3, #28]
      break;
 8003b52:	e043      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fc0a 	bl	8004374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0208 	orr.w	r2, r2, #8
 8003b6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003b92:	e023      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fc4e 	bl	800443c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	021a      	lsls	r2, r3, #8
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003bd4:	e002      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop

08003bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIM_ConfigClockSource+0x1c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e0de      	b.n	8003dca <HAL_TIM_ConfigClockSource+0x1da>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a63      	ldr	r2, [pc, #396]	@ (8003dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f000 80a9 	beq.w	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c4c:	4a61      	ldr	r2, [pc, #388]	@ (8003dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f200 80ae 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c54:	4a60      	ldr	r2, [pc, #384]	@ (8003dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f000 80a1 	beq.w	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	f200 80a6 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c64:	4a5d      	ldr	r2, [pc, #372]	@ (8003ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	f000 8099 	beq.w	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c6c:	4a5b      	ldr	r2, [pc, #364]	@ (8003ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	f200 809e 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c74:	4a5a      	ldr	r2, [pc, #360]	@ (8003de0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	f000 8091 	beq.w	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c7c:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	f200 8096 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003c88:	f000 8089 	beq.w	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003c90:	f200 808e 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c98:	d03e      	beq.n	8003d18 <HAL_TIM_ConfigClockSource+0x128>
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9e:	f200 8087 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca6:	f000 8086 	beq.w	8003db6 <HAL_TIM_ConfigClockSource+0x1c6>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cae:	d87f      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cb0:	2b70      	cmp	r3, #112	@ 0x70
 8003cb2:	d01a      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xfa>
 8003cb4:	2b70      	cmp	r3, #112	@ 0x70
 8003cb6:	d87b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cb8:	2b60      	cmp	r3, #96	@ 0x60
 8003cba:	d050      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
 8003cbc:	2b60      	cmp	r3, #96	@ 0x60
 8003cbe:	d877      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cc0:	2b50      	cmp	r3, #80	@ 0x50
 8003cc2:	d03c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x14e>
 8003cc4:	2b50      	cmp	r3, #80	@ 0x50
 8003cc6:	d873      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d058      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x18e>
 8003ccc:	2b40      	cmp	r3, #64	@ 0x40
 8003cce:	d86f      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cd0:	2b30      	cmp	r3, #48	@ 0x30
 8003cd2:	d064      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003cd4:	2b30      	cmp	r3, #48	@ 0x30
 8003cd6:	d86b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d060      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d867      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05c      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d05a      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8003ce8:	e062      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	f000 fc81 	bl	8004600 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	609a      	str	r2, [r3, #8]
      break;
 8003d16:	e04f      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d28:	f000 fc6a 	bl	8004600 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d3a:	609a      	str	r2, [r3, #8]
      break;
 8003d3c:	e03c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f000 fbdc 	bl	8004508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2150      	movs	r1, #80	@ 0x50
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fc35 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003d5c:	e02c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 fbfb 	bl	8004566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2160      	movs	r1, #96	@ 0x60
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc25 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e01c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f000 fbbc 	bl	8004508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2140      	movs	r1, #64	@ 0x40
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fc15 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003d9c:	e00c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f000 fc0c 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003dae:	e003      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      break;
 8003db4:	e000      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	00100070 	.word	0x00100070
 8003dd8:	00100040 	.word	0x00100040
 8003ddc:	00100030 	.word	0x00100030
 8003de0:	00100020 	.word	0x00100020

08003de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a42      	ldr	r2, [pc, #264]	@ (8003f00 <TIM_Base_SetConfig+0x11c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00f      	beq.n	8003e1c <TIM_Base_SetConfig+0x38>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e02:	d00b      	beq.n	8003e1c <TIM_Base_SetConfig+0x38>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3f      	ldr	r2, [pc, #252]	@ (8003f04 <TIM_Base_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_Base_SetConfig+0x38>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f08 <TIM_Base_SetConfig+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0x38>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	@ (8003f0c <TIM_Base_SetConfig+0x128>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d108      	bne.n	8003e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a33      	ldr	r2, [pc, #204]	@ (8003f00 <TIM_Base_SetConfig+0x11c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01b      	beq.n	8003e6e <TIM_Base_SetConfig+0x8a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3c:	d017      	beq.n	8003e6e <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a30      	ldr	r2, [pc, #192]	@ (8003f04 <TIM_Base_SetConfig+0x120>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <TIM_Base_SetConfig+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2f      	ldr	r2, [pc, #188]	@ (8003f08 <TIM_Base_SetConfig+0x124>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00f      	beq.n	8003e6e <TIM_Base_SetConfig+0x8a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2e      	ldr	r2, [pc, #184]	@ (8003f0c <TIM_Base_SetConfig+0x128>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_Base_SetConfig+0x8a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2d      	ldr	r2, [pc, #180]	@ (8003f10 <TIM_Base_SetConfig+0x12c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0x8a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2c      	ldr	r2, [pc, #176]	@ (8003f14 <TIM_Base_SetConfig+0x130>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0x8a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2b      	ldr	r2, [pc, #172]	@ (8003f18 <TIM_Base_SetConfig+0x134>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <TIM_Base_SetConfig+0x11c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00f      	beq.n	8003ecc <TIM_Base_SetConfig+0xe8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <TIM_Base_SetConfig+0x128>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0xe8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <TIM_Base_SetConfig+0x12c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0xe8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <TIM_Base_SetConfig+0x130>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0xe8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <TIM_Base_SetConfig+0x134>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d103      	bne.n	8003ed4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d105      	bne.n	8003ef2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f023 0201 	bic.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	611a      	str	r2, [r3, #16]
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40014400 	.word	0x40014400
 8003f18:	40014800 	.word	0x40014800

08003f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f023 0201 	bic.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0303 	bic.w	r3, r3, #3
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0302 	bic.w	r3, r3, #2
 8003f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a2c      	ldr	r2, [pc, #176]	@ (8004028 <TIM_OC1_SetConfig+0x10c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00f      	beq.n	8003f9c <TIM_OC1_SetConfig+0x80>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800402c <TIM_OC1_SetConfig+0x110>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <TIM_OC1_SetConfig+0x80>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <TIM_OC1_SetConfig+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_OC1_SetConfig+0x80>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a29      	ldr	r2, [pc, #164]	@ (8004034 <TIM_OC1_SetConfig+0x118>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_OC1_SetConfig+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a28      	ldr	r2, [pc, #160]	@ (8004038 <TIM_OC1_SetConfig+0x11c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d10c      	bne.n	8003fb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0308 	bic.w	r3, r3, #8
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <TIM_OC1_SetConfig+0x10c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_OC1_SetConfig+0xc2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800402c <TIM_OC1_SetConfig+0x110>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_OC1_SetConfig+0xc2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	@ (8004030 <TIM_OC1_SetConfig+0x114>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_OC1_SetConfig+0xc2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	@ (8004034 <TIM_OC1_SetConfig+0x118>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_OC1_SetConfig+0xc2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a17      	ldr	r2, [pc, #92]	@ (8004038 <TIM_OC1_SetConfig+0x11c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d111      	bne.n	8004002 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40013400 	.word	0x40013400
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800

0800403c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f023 0210 	bic.w	r2, r3, #16
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0320 	bic.w	r3, r3, #32
 800408a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a28      	ldr	r2, [pc, #160]	@ (800413c <TIM_OC2_SetConfig+0x100>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC2_SetConfig+0x6c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a27      	ldr	r2, [pc, #156]	@ (8004140 <TIM_OC2_SetConfig+0x104>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10d      	bne.n	80040c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1d      	ldr	r2, [pc, #116]	@ (800413c <TIM_OC2_SetConfig+0x100>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <TIM_OC2_SetConfig+0xb0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004140 <TIM_OC2_SetConfig+0x104>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_OC2_SetConfig+0xb0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004144 <TIM_OC2_SetConfig+0x108>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_OC2_SetConfig+0xb0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1a      	ldr	r2, [pc, #104]	@ (8004148 <TIM_OC2_SetConfig+0x10c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_OC2_SetConfig+0xb0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a19      	ldr	r2, [pc, #100]	@ (800414c <TIM_OC2_SetConfig+0x110>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d113      	bne.n	8004114 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40013400 	.word	0x40013400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800

08004150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800417e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a27      	ldr	r2, [pc, #156]	@ (800424c <TIM_OC3_SetConfig+0xfc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_OC3_SetConfig+0x6a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a26      	ldr	r2, [pc, #152]	@ (8004250 <TIM_OC3_SetConfig+0x100>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10d      	bne.n	80041d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1c      	ldr	r2, [pc, #112]	@ (800424c <TIM_OC3_SetConfig+0xfc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_OC3_SetConfig+0xae>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004250 <TIM_OC3_SetConfig+0x100>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_OC3_SetConfig+0xae>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004254 <TIM_OC3_SetConfig+0x104>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_OC3_SetConfig+0xae>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <TIM_OC3_SetConfig+0x108>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0xae>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a18      	ldr	r2, [pc, #96]	@ (800425c <TIM_OC3_SetConfig+0x10c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40013400 	.word	0x40013400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800

08004260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800428e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	031b      	lsls	r3, r3, #12
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a28      	ldr	r2, [pc, #160]	@ (8004360 <TIM_OC4_SetConfig+0x100>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC4_SetConfig+0x6c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a27      	ldr	r2, [pc, #156]	@ (8004364 <TIM_OC4_SetConfig+0x104>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d10d      	bne.n	80042e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <TIM_OC4_SetConfig+0x100>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00f      	beq.n	8004310 <TIM_OC4_SetConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <TIM_OC4_SetConfig+0x104>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00b      	beq.n	8004310 <TIM_OC4_SetConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <TIM_OC4_SetConfig+0x108>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_OC4_SetConfig+0xb0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1a      	ldr	r2, [pc, #104]	@ (800436c <TIM_OC4_SetConfig+0x10c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_OC4_SetConfig+0xb0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a19      	ldr	r2, [pc, #100]	@ (8004370 <TIM_OC4_SetConfig+0x110>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d113      	bne.n	8004338 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004316:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800431e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	019b      	lsls	r3, r3, #6
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800

08004374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80043b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	041b      	lsls	r3, r3, #16
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a17      	ldr	r2, [pc, #92]	@ (8004428 <TIM_OC5_SetConfig+0xb4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00f      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a16      	ldr	r2, [pc, #88]	@ (800442c <TIM_OC5_SetConfig+0xb8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a15      	ldr	r2, [pc, #84]	@ (8004430 <TIM_OC5_SetConfig+0xbc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <TIM_OC5_SetConfig+0xc0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a13      	ldr	r2, [pc, #76]	@ (8004438 <TIM_OC5_SetConfig+0xc4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d109      	bne.n	8004402 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800

0800443c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	051b      	lsls	r3, r3, #20
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <TIM_OC6_SetConfig+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a17      	ldr	r2, [pc, #92]	@ (80044f8 <TIM_OC6_SetConfig+0xbc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <TIM_OC6_SetConfig+0xc0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <TIM_OC6_SetConfig+0xc4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <TIM_OC6_SetConfig+0xc8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d109      	bne.n	80044cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	029b      	lsls	r3, r3, #10
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f023 030a 	bic.w	r3, r3, #10
 8004544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004566:	b480      	push	{r7}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f023 0210 	bic.w	r2, r3, #16
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f043 0307 	orr.w	r3, r3, #7
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800461a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	021a      	lsls	r2, r3, #8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	431a      	orrs	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	609a      	str	r2, [r3, #8]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2201      	movs	r2, #1
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e065      	b.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2c      	ldr	r2, [pc, #176]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d108      	bne.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d018      	beq.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471a:	d013      	beq.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00e      	beq.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d009      	beq.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a13      	ldr	r2, [pc, #76]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10c      	bne.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	4313      	orrs	r3, r2
 8004754:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40013400 	.word	0x40013400
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40014000 	.word	0x40014000

08004790 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e073      	b.n	8004894 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	041b      	lsls	r3, r3, #16
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a19      	ldr	r2, [pc, #100]	@ (80048a0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	@ (80048a4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d11c      	bne.n	8004882 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004852:	051b      	lsls	r3, r3, #20
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40013400 	.word	0x40013400

080048a8 <memset>:
 80048a8:	4402      	add	r2, r0
 80048aa:	4603      	mov	r3, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <__libc_init_array>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	4d0d      	ldr	r5, [pc, #52]	@ (80048f0 <__libc_init_array+0x38>)
 80048bc:	4c0d      	ldr	r4, [pc, #52]	@ (80048f4 <__libc_init_array+0x3c>)
 80048be:	1b64      	subs	r4, r4, r5
 80048c0:	10a4      	asrs	r4, r4, #2
 80048c2:	2600      	movs	r6, #0
 80048c4:	42a6      	cmp	r6, r4
 80048c6:	d109      	bne.n	80048dc <__libc_init_array+0x24>
 80048c8:	4d0b      	ldr	r5, [pc, #44]	@ (80048f8 <__libc_init_array+0x40>)
 80048ca:	4c0c      	ldr	r4, [pc, #48]	@ (80048fc <__libc_init_array+0x44>)
 80048cc:	f000 f818 	bl	8004900 <_init>
 80048d0:	1b64      	subs	r4, r4, r5
 80048d2:	10a4      	asrs	r4, r4, #2
 80048d4:	2600      	movs	r6, #0
 80048d6:	42a6      	cmp	r6, r4
 80048d8:	d105      	bne.n	80048e6 <__libc_init_array+0x2e>
 80048da:	bd70      	pop	{r4, r5, r6, pc}
 80048dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e0:	4798      	blx	r3
 80048e2:	3601      	adds	r6, #1
 80048e4:	e7ee      	b.n	80048c4 <__libc_init_array+0xc>
 80048e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ea:	4798      	blx	r3
 80048ec:	3601      	adds	r6, #1
 80048ee:	e7f2      	b.n	80048d6 <__libc_init_array+0x1e>
 80048f0:	08004928 	.word	0x08004928
 80048f4:	08004928 	.word	0x08004928
 80048f8:	08004928 	.word	0x08004928
 80048fc:	0800492c 	.word	0x0800492c

08004900 <_init>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	bf00      	nop
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr

0800490c <_fini>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr
